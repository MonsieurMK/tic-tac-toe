/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Java plugin for the javadoc building task
    id 'java'

    // JPackage plugin
    id "org.panteleyev.jpackageplugin" version "1.3.1"
    
    // Plugin to get the project version from the latest git tag
    id "com.github.gradle-git-version-calculator" version "1.1.0"
}

// Change to project name
mainClassName = 'JavaProjectTemplate.App'
// Automatically gets the version from the latest git tag
project.version = gitVersionCalculator.calculateVersion("v").minus(".dev").minus("+dev").replaceAll("\\+[0-9]+", "")

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = "$mainClassName"
}

// Define the jdk version (here 17)
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Javadoc generation
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

// Generate executable jar
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
            'Main-Class': "$mainClassName"
        )
    }

    baseName 'javaApplicationTemplate' // Change to the desired executable jar name

    from {
        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    }
}

// Generate os specific installers (generated installer depends on the current OS)
tasks.jpackage {
    input = "${buildDir}/libs"
    destination = "${buildDir}/dist"

    appName = "javaApplicationTemplate" // Change to the desired installer name
    appVersion = project.version
    type = org.panteleyev.jpackage.ImageType.DEFAULT
    appDescription = "None" // Change to the desired application description
    vendor = "None" 

    mainClass = "$mainClassName"
    mainJar = jar.archiveFileName.get()

    // javaOptions = application.applicationDefaultJvmArgs // if required

    // arguments = [] // main jar arguments as list of Strings if required

    // Windows
    winMenu = true
    winDirChooser = true
    winShortcut = true
    winConsole = false

    windows {
        winConsole = false
        // icon = "${buildDir}/resources/main/logo_white.ico" // application icon in .ico format for windows
    }

    // Linux
    linuxPackageName = jar.archiveBaseName.get()
    linuxShortcut = true

    // icon = "${buildDir}/resources/main/logo.png" // application icon in .png format for linux

    // OS X
    macPackageName = "javaApplicationTemplate" // Change to the desired package name (or jar.archiveBaseName.get())

    /*
    mac {
        icon = "${buildDir}/resources/main/logo_white.icns" // application icon in .icns format for macos
    }
    */
}

jpackage.dependsOn(jar)

gitVersionCalculator {
    prefix = "v"
    withSnapshot = false
}

task printTagVersion {
    doLast {
        println(project.version)
    }
}
